using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class HipLogic : MonoBehaviour {

    //float legLength = 3f;
    //float stanceLength;

    public GameObject[] legs;

    Rigidbody hip;
    public GameObject seekPoint;

    float legCount;
   
    //"cheat" seek solver. Imparts an equal force to the foot.
    public float seekStrength = 100; //multiplier to the linear distance. Higher numbers equate to being "further away" to the solver
    public float seekCap = 100; //maximum force generated by the solver
    public float seekDrag = 10; //arbitrary drag operating on velocity
    //upright hip action torque solver. Imparts an equal force to the joined thighs.
    public float torqueStrength = 100; 
    public float torqueCap = 100;
    //upwards push solver. Imparts equal force to the foot, treats the leg as a linear spring. Probably not cheating.
    public float vertStrength = 100;
    public float vertCap = 100;
    float vertMag, seekMag, vertScalar;
    Vector3 torqueForce, vertForce, seekForce, seekDragForce;
    

    //float legScalar = 0;
    //public float maxHeight = 0;

    // Use this for initialization
    void Start () {
        hip = this.gameObject.GetComponent<Rigidbody>();
        legCount = legs.Length;

    }
    /*
	float FindHeight(Rigidbody foot, float legLength)
    {
        //legvector dot widthvector = height
        //or just do this
        var stanceLength = (new Vector3(foot.position.x, 0, foot.position.z) - new Vector3(this.gameObject.GetComponent<Rigidbody>().position.x, 0, this.gameObject.GetComponent<Rigidbody>().position.z)).sqrMagnitude;
        //find how high we can sit
        return maxHeight = Mathf.Sqrt((legLength * legLength) - (stanceLength));
    }*/
	// Update is called once per frame
	void FixedUpdate ()
    {
        //seek the point!

        

        foreach (GameObject leg in legs)
        {
            var thigh = leg.GetComponent<ThighScript>().GetComponent<Rigidbody>();
            var foot = leg.GetComponent<ThighScript>().foot;
            var legAnchor = leg.transform.TransformPoint(leg.GetComponent<ConfigurableJoint>().anchor);



            /*
            //simple (cheat) seeking, pushing force divided on all legs
            seekMag = (seekPoint.transform.position - hip.position).magnitude * seekStrength / legCount;
            seekMag = Mathf.Clamp(seekMag, 0.0f, seekCap);
            hip.AddForceAtPosition((seekPoint.transform.position - hip.position).normalized * seekMag, legAnchor, ForceMode.Force);
            foot.GetComponent<Rigidbody>().AddForce((seekPoint.transform.position - hip.position).normalized * -seekMag, ForceMode.Force);
            */
            
            //A dot B, what we can push with this leg projected on to where we want to go
            /*new Vector3(0, hip.position.y - seekPoint.transform.position.y, 0)*/
            vertScalar = Vector3.Dot(foot.transform.position - legAnchor, Vector3.up) / (foot.transform.position - legAnchor).magnitude;

            /*
             a = -1/2 velocity^2/distance, idiot.
             
            var vertAccel = 0.0f;
            if (Mathf.Abs(hip.position.y - seekPoint.transform.position.y) > 0.001f)
            {
                vertAccel = -0.5f * hip.velocity.sqrMagnitude / (hip.position.y - seekPoint.transform.position.y);
            }
            */

            //pure upwards seeking
            /*
            vertMag = (hip.position.y - seekPoint.transform.position.y) * vertStrength;
            vertMag = Mathf.Clamp(vertMag, -vertCap, vertCap) * vertScalar;
            vertForce = (foot.transform.position - legAnchor).normalized * -vertMag / legCount;
            hip.AddForceAtPosition(vertForce, legAnchor, ForceMode.Force);
            foot.GetComponent<Rigidbody>().AddForce(-vertForce, ForceMode.Force);
            */
            //upwards constant acceleration: maintain something like -9.8 to counteract gravity and counteract that on the foot so it's not antigrav
            //this is happening projected on one axis so the leg will stop forcing up once it's sideways

            vertMag = vertCap * vertScalar;
            vertForce = (foot.transform.position - legAnchor).normalized * -vertMag / legCount;
            hip.AddForceAtPosition(vertForce, legAnchor, ForceMode.Acceleration);
            foot.GetComponent<Rigidbody>().AddForce(-vertForce * foot.GetComponent<Rigidbody>().mass, ForceMode.Force);

            //Cheat seeking
            seekMag = ((seekPoint.transform.position - hip.position).magnitude) * seekStrength / legCount;
            var seekAccel = 0.0f;
            if ((seekPoint.transform.position - hip.position).magnitude > 0.001f)
            {
                seekAccel = 0.5f * hip.velocity.sqrMagnitude / ((seekPoint.transform.position - hip.position).magnitude);
            }
            seekAccel *= hip.mass;

            seekMag = Mathf.Clamp(seekMag, 0.0f, seekCap);
            //seekMag = seekCap;
            /*Debug.Log(seekAccel);
            if (seekAccel > seekMag)
            {
                seekForce = hip.velocity.normalized * -seekMag;
            }
            else
            {
                seekForce = (seekPoint.transform.position - hip.position).normalized * seekMag;
            }
            */
            
            seekForce = (seekPoint.transform.position - hip.position).normalized * seekMag;
            hip.AddForceAtPosition(seekForce, legAnchor, ForceMode.Force);
            foot.GetComponent<Rigidbody>().AddForce(-seekForce, ForceMode.Force);
            var seekDragMag = 0.0f;
            
            if(hip.velocity.magnitude < seekDrag)
            {
                seekDragMag = -hip.velocity.magnitude;
            }
            else
            {
                seekDragMag = -seekDrag;
            }

            //seekDragForce = (seekPoint.transform.position - hip.position).normalized * seekDragMag;
            seekDragForce = (hip.velocity).normalized * seekDragMag;
            hip.AddForceAtPosition(seekDragForce, legAnchor, ForceMode.Force);
            foot.GetComponent<Rigidbody>().AddForce(-seekDragForce, ForceMode.Force);

            //hip righting motion
            torqueForce = Vector3.Cross(transform.up, Vector3.up) * torqueStrength / legCount;
            torqueForce = torqueForce.normalized * Mathf.Clamp(torqueForce.magnitude, 0.0f, torqueCap);
            hip.AddTorque(torqueForce, ForceMode.Force);
            thigh.AddTorque(-torqueForce, ForceMode.Force);
            



        }
        

        //hip.AddTorque(Vector3.Cross(transform.up, Vector3.up) * torqueStrength, ForceMode.Force);

    }
    void OnDrawGizmos()
    {
        if (hip)
        {
      


            foreach (GameObject leg in legs)
            {
                
                var foot = leg.GetComponent<ThighScript>().foot;
                var legAnchor = leg.transform.TransformPoint(leg.GetComponent<ConfigurableJoint>().anchor);

                Gizmos.color = Color.magenta;
                Gizmos.DrawRay(legAnchor, vertForce * 0.1f);
                Gizmos.DrawRay(foot.transform.position, -vertForce * 0.1f);


                Gizmos.color = Color.green;
                Gizmos.DrawRay(foot.transform.position, -seekForce * 0.1f);
                Gizmos.DrawRay(legAnchor, seekForce * 0.1f);

                Gizmos.color = Color.yellow;
                Gizmos.DrawRay(foot.transform.position, -seekDragForce * 0.1f);
                Gizmos.DrawRay(legAnchor, seekDragForce * 0.1f);
                

               // var vertAccel = 0.0f;
               // if (Mathf.Abs(hip.position.y - seekPoint.transform.position.y) > 0.001f)
               // {
               //     vertAccel = -0.5f * hip.velocity.sqrMagnitude / (hip.position.y - seekPoint.transform.position.y);
               // }
               // Gizmos.color = Color.blue;
               // Gizmos.DrawRay(hip.position, (vertAccel + vertCap) * Vector3.up * 0.1f);
            }

        }

    }
}
